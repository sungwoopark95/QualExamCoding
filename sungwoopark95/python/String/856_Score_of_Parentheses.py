"""
괄호 문자열의 균형을 추적하면서 해당 문자열을 재귀적으로 분해하고 그 점수를 계산하는 함수

1. 기본 케이스(Base Case):
빈 문자열은 점수가 없으므로 0을 반환합니다.
"()"는 점수가 1이므로 1을 반환합니다.

2. 균형 점수(Balance Score):
balance 변수를 사용하여 열린 괄호와 닫힌 괄호의 균형을 추적합니다. 
열린 괄호 '('는 balance를 1 증가시키고, 닫힌 괄호 ')'는 balance를 1 감소시킵니다.
균형이 되면 (즉, balance가 0이 되면), 현재 위치까지의 부분 문자열은 균형 잡힌 괄호 문자열임을 의미합니다.

3. 재귀적 접근:
괄호의 균형이 문자열의 끝에서 발견되면, 즉 (A) 형태의 문자열이면, 내부 괄호 문자열 A의 점수를 재귀적으로 계산한 후 그 결과에 2를 곱합니다.
괄호의 균형이 문자열 중간에서 발견되면, 즉 A와 B 두 부분으로 분할할 수 있습니다. 각 부분 문자열의 점수를 재귀적으로 계산하고 그 두 점수를 합합니다.
"""

def scoreOfParentheses(s: str) -> int:
    # 기본 경우
    # 빈 문자열은 점수 0을 가집니다.
    if s == "":
        return 0
    # "()" 문자열은 점수 1을 가집니다.
    if s == "()":
        return 1

    # 괄호의 균형을 추적하고 문자열을 분할하는 데 사용됩니다.
    balance = 0
    for i, char in enumerate(s):
        # 열린 괄호('(')를 만나면 균형 점수를 1 증가시킵니다.
        if char == '(':
            balance += 1
        # 닫힌 괄호(')')를 만나면 균형 점수를 1 감소시킵니다.
        else:
            balance -= 1
        # 괄호의 균형이 맞는 경우 문자열을 분할합니다.
        if balance == 0:
            # 괄호의 균형이 문자열의 끝에서 발견되는 경우
            if i == len(s) - 1:
                # 내부 괄호 문자열의 점수를 재귀적으로 계산한 후 2를 곱합니다.
                return 2 * scoreOfParentheses(s[1:i])
            # 괄호의 균형이 문자열 중간에서 발견되는 경우
            else:
                # 괄호 문자열을 두 부분으로 분할하고 각 부분의 점수를 재귀적으로 계산한 후 합합니다.
                return scoreOfParentheses(s[:i+1]) + scoreOfParentheses(s[i+1:])